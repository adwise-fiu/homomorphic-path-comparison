plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'signing'
}

// name is set in settings.gradle
group 'io.github.andrewquijano'
version = System.getenv("VERSION") ?: "2.0.0"

repositories {
    mavenCentral()
}

// https://www.baeldung.com/gradle-sourcecompatiblity-vs-targetcompatibility
java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


dependencies {
    implementation 'junit:junit:4.13.2'
    implementation 'io.github.andrewquijano:ciphercraft:1.0.6'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.16.1'
}

// To create the JAR file with 'gradlew jar'
tasks.named('jar') {
    archiveFileName = "${project.name}-${project.version}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': System.getenv('VERSION') ?: project.version
        )
    }
}

// Commenting because it doesn't work well on TravisCI
test {
    testLogging {
// Make sure output from
// standard out or error is shown
// in Gradle output.
        showStandardStreams = true
    }

    // Set JVM arguments to include your agent
    jvmArgs = [
            '-javaagent:libs/InstrumentationAgent.jar' // Change this to your agent JAR path
    ]
}

// This library was built for Java 8 so it can be imported into Android as well.
// If you want to use a later version of Java, this should help point what to tweak.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xlint:deprecation,unchecked"
        }
    }
}

jacocoTestReport {
    reports {
        if (project.hasProperty("createReports")) {
            xml.required = true
            html.required = true
        }
        else {
            html.required = false
            xml.required = false
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(Test).configureEach {
    if (project.hasProperty("createReports")) {
        reports.html.required = true
        reports.junitXml.required = true
    }
    else {
        reports.html.required = false
        reports.junitXml.required = false
    }
}

clean {
    delete 'logs/*.log'
}

check.dependsOn jacocoTestReport

application {
    mainClass.set(project.findProperty("chooseRole").toString())
}

// Define a task to run your Java application with the agent
tasks.register('runWithAgent', JavaExec) {
    mainClass.set(project.findProperty("chooseRole").toString())
    classpath = sourceSets.main.runtimeClasspath

    // Set JVM arguments to include your agent
    jvmArgs = [
            '-javaagent:libs/InstrumentationAgent.jar'
    ]

    // Pass command-line arguments to your application
    // gradle run -PchooseRole=PathsBob -Pargs='./data/ownroute3.txt 9000'
    if (project.hasProperty('args')) {
        args project.args.split(' ')
    }
}

// Configure the 'run' task to depend on 'runWithAgent'
tasks.run.dependsOn('runWithAgent')

tasks.register('generateJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')
    options.docTitle = 'Secure Drone Collision Avoidance'
}

// This is for publishing the library to Maven Central
publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java

            pom {
                name.set('drone-collision-avoidance')
                description.set('This library provides a secure drone collision avoidance system using homomorphic encryption. ' +
                        'It uses encrypted GPS coordinates to compute paths and avoid collisions without revealing sensitive location data. ' +
                        'For now, to avoid collision, a drone changes altitude to avoid collision with another drone as it knows the path segment of collision')
                url.set('https://github.com/adwise-fiu/homomorphic-path-comparison')

                licenses {
                    license {
                        name.set('MIT License')
                        url.set('https://opensource.org/licenses/MIT')
                    }
                }

                developers {
                    developer {
                        id.set('AndrewQuijano')
                        name.set('Andrew Quijano')
                        email.set('andrew.quijano@nyu.edu')
                    }
                }

                scm {
                    connection.set('scm:git:git://github.com/adwise-fiu/homomorphic-path-comparison.git')
                    developerConnection.set('scm:git:ssh://github.com:adwise-fiu/homomorphic-path-comparison.git')
                    url.set('https://github.com/adwise-fiu/homomorphic-path-comparison')
                }
            }
        }
    }

    repositories {
        maven {
            name = "Sonatype"
            url = version.endsWith("SNAPSHOT") ?
                    uri("https://s01.oss.sonatype.org/content/repositories/snapshots/") :
                    uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

// Update this file, ~/.gnupg/dirmngr.conf
// and add this line to the file 'keyserver hkps://keyserver.ubuntu.com'
// then run 'gpg --send-keys YOUR_KEY_ID'
signing {
    // Point to the key file on your machine, used for local testing
    def signingKeyFile = findProperty("signingKeyFile") ?: System.getenv("SIGNING_KEY_FILE")
    // gpg --armor --export-secret-keys YOUR_KEY_ID, export the key into a secret
    def signingKey = findProperty("signingKey") ?: System.getenv("SIGNING_KEY") ?: ""
    // If no property or environment variable is found, it will be empty password
    def signingPassword = findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD") ?: ""

    if (signingKeyFile) {
        println("Reading signing key from file: $signingKeyFile")
        def signingKey_content = new File(signingKeyFile.toString()).text
        useInMemoryPgpKeys(signingKey_content.toString(), signingPassword.toString())
        publishing.publications.named("mavenJava").configure { publication ->
            signing.sign(publication)
        }
    }
    else {
        println("No signing key file found, will attempt to use in-memory key")
        if (signingKey) {
            println("Using in-memory signing key")
            useInMemoryPgpKeys(signingKey.toString(), signingPassword?.toString())
            publishing.publications.named("mavenJava").configure { publication ->
                signing.sign(publication)
            }
        }
        else {
            println("No signing key found. Skipping signing.")
        }
    }
}